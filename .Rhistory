data69	[(28+i):(128)],
data70	[(28+i):(128)],
data71	[(28+i):(128)],
data72	[(28+i):(128)],
data73	[(28+i):(128)],
data74	[(28+i):(128)],
data75	[(28+i):(128)],
data76	[(28+i):(128)],
data77	[(28+i):(128)],
data78	[(28+i):(128)],
data79	[(28+i):(128)],
data80	[(28+i):(128)],
data81	[(28+i):(128)],
data82	[(28+i):(128)],
data83	[(28+i):(128)],
data84	[(28+i):(128)],
data85	[(28+i):(128)],
data86	[(28+i):(128)],
data87	[(28+i):(128)],
data88	[(28+i):(128)],
data89	[(28+i):(128)],
data90	[(28+i):(128)],
data91	[(28+i):(128)],
data92	[(28+i):(128)],
data93	[(28+i):(128)],
data94	[(28+i):(128)],
data95	[(28+i):(128)],
data96	[(28+i):(128)],
data97	[(28+i):(128)],
data98	[(28+i):(128)],
data99	[(28+i):(128)],
data100	[(28+i):(128)],
data101	[(28+i):(128)],
data102	[(28+i):(128)],
data103	[(28+i):(128)],
data104	[(28+i):(128)],
data105	[(28+i):(128)],
data106	[(28+i):(128)]
)
#demean for X
Yt=matrix(0,nrow=(128-28+1-i),ncol=106)
for (k in 1:106){
Yt[,k]=(table[,k]-mean(table[,k]))
}
Y=t(Yt)
pl=please(Y)
X=pl%*%Y
#covariance,eigenvector and eigenvalues
cov.X=(X%*%t(X))/106
X.eigen=eigen(cov.X)
X.evalues=X.eigen$values
X.evector=X.eigen$vectors
X.chosenvectors=X.evector[,1:6]
X.PC=as.matrix(t(X))%*%X.chosenevectors
#101*6=t x number of factors
h=4
X.PC1=X.PC[(1+h):(128-28+1-i),1]
X.PC2=X.PC[(1+h):(128-28+1-i),2]
X.PC3=X.PC[(1+h):(128-28+1-i),3]
X.PC4=X.PC[(1+h):(128-28+1-i),4]
X.PC5=X.PC[(1+h):(128-28+1-i),5]
X.PC6=X.PC[(1+h):(128-28+1-i),6]
dim(X.PC1)
length(X.PC1)
length(X.PC2)
length(X.PC3)
length(X.PC4)
length(X.PC5)
length(X.PC6)
p=data1[(28+i):(124-j)] #97 obs
pcoeff=coef(lm(p~X.PC1+X.PC2+X.PC3+X.PC4+X.PC5+X.PC6))
length(p)
fix(shout3)
fix(shout1)
p=data1[(28+i):(127-j)] #97 obs
pcoeff=coef(lm(p~X.PC1+X.PC2+X.PC3+X.PC4+X.PC5+X.PC6))
fix(shout1)
call3=function(q){
answer=matrix(0,28,2)
for (l in 0:q){
i=-l
table=data.frame(
data1	[(28+i):(128)],
data2	[(28+i):(128)],
data3	[(28+i):(128)],
data4	[(28+i):(128)],
data5	[(28+i):(128)],
data6	[(28+i):(128)],
data7	[(28+i):(128)],
data8	[(28+i):(128)],
data9	[(28+i):(128)],
data10	[(28+i):(128)],
data11	[(28+i):(128)],
data12	[(28+i):(128)],
data13	[(28+i):(128)],
data14	[(28+i):(128)],
data15	[(28+i):(128)],
data16	[(28+i):(128)],
data17	[(28+i):(128)],
data18	[(28+i):(128)],
data19	[(28+i):(128)],
data20	[(28+i):(128)],
data21	[(28+i):(128)],
data22	[(28+i):(128)],
data23	[(28+i):(128)],
data24	[(28+i):(128)],
data25	[(28+i):(128)],
data26	[(28+i):(128)],
data27	[(28+i):(128)],
data28	[(28+i):(128)],
data29	[(28+i):(128)],
data30	[(28+i):(128)],
data31	[(28+i):(128)],
data32	[(28+i):(128)],
data33	[(28+i):(128)],
data34	[(28+i):(128)],
data35	[(28+i):(128)],
data36	[(28+i):(128)],
data37	[(28+i):(128)],
data38	[(28+i):(128)],
data39	[(28+i):(128)],
data40	[(28+i):(128)],
data41	[(28+i):(128)],
data42	[(28+i):(128)],
data43	[(28+i):(128)],
data44	[(28+i):(128)],
data45	[(28+i):(128)],
data46	[(28+i):(128)],
data47	[(28+i):(128)],
data48	[(28+i):(128)],
data49	[(28+i):(128)],
data50	[(28+i):(128)],
data51	[(28+i):(128)],
data52	[(28+i):(128)],
data53	[(28+i):(128)],
data54	[(28+i):(128)],
data55	[(28+i):(128)],
data56	[(28+i):(128)],
data57	[(28+i):(128)],
data58	[(28+i):(128)],
data59	[(28+i):(128)],
data60	[(28+i):(128)],
data61	[(28+i):(128)],
data62	[(28+i):(128)],
data63	[(28+i):(128)],
data64	[(28+i):(128)],
data65	[(28+i):(128)],
data66	[(28+i):(128)],
data67	[(28+i):(128)],
data68	[(28+i):(128)],
data69	[(28+i):(128)],
data70	[(28+i):(128)],
data71	[(28+i):(128)],
data72	[(28+i):(128)],
data73	[(28+i):(128)],
data74	[(28+i):(128)],
data75	[(28+i):(128)],
data76	[(28+i):(128)],
data77	[(28+i):(128)],
data78	[(28+i):(128)],
data79	[(28+i):(128)],
data80	[(28+i):(128)],
data81	[(28+i):(128)],
data82	[(28+i):(128)],
data83	[(28+i):(128)],
data84	[(28+i):(128)],
data85	[(28+i):(128)],
data86	[(28+i):(128)],
data87	[(28+i):(128)],
data88	[(28+i):(128)],
data89	[(28+i):(128)],
data90	[(28+i):(128)],
data91	[(28+i):(128)],
data92	[(28+i):(128)],
data93	[(28+i):(128)],
data94	[(28+i):(128)],
data95	[(28+i):(128)],
data96	[(28+i):(128)],
data97	[(28+i):(128)],
data98	[(28+i):(128)],
data99	[(28+i):(128)],
data100	[(28+i):(128)],
data101	[(28+i):(128)],
data102	[(28+i):(128)],
data103	[(28+i):(128)],
data104	[(28+i):(128)],
data105	[(28+i):(128)],
data106	[(28+i):(128)]
)
#demean for X
Yt=matrix(0,nrow=(128-28+1-i),ncol=106)
for (k in 1:106){
Yt[,k]=(table[,k]-mean(table[,k]))
}
Y=t(Yt)
pl=please(Y)
X=pl%*%Y
#covariance,eigenvector and eigenvalues
cov.X=(X%*%t(X))/106
X.eigen=eigen(cov.X)
X.evalues=X.eigen$values
X.evector=X.eigen$vectors
X.chosenvectors=X.evector[,1:6]
X.PC=as.matrix(t(X))%*%X.chosenevectors
#101*6=t x number of factors
h=4
X.PC1=X.PC[(1+h):(128-28+1-i),1]
X.PC2=X.PC[(1+h):(128-28+1-i),2]
X.PC3=X.PC[(1+h):(128-28+1-i),3]
X.PC4=X.PC[(1+h):(128-28+1-i),4]
X.PC5=X.PC[(1+h):(128-28+1-i),5]
X.PC6=X.PC[(1+h):(128-28+1-i),6]
#t=28 to 127 used for extraction of factors by pca
#h=4 (meaning one earn since ours is quarterly data)
#to estimate t=28 now h=1 require t=28 to 124
p=data1[(28+i):(124)] #97 obs
pcoeff=coef(lm(p~X.PC1+X.PC2+X.PC3+X.PC4+X.PC5+X.PC6))
pcoeff
# results
# (Intercept)         X.PC1         X.PC2         X.PC3         X.PC4         X.PC5
#-6.522025e-03 -4.092267e-05  3.251827e-04  1.219635e-03  3.095945e-04 -1.924415e-03
#X.PC6
#1.086039e-03 5
Xfactormatrix=as.matrix(data.frame(1,X.PC[((1+h):(128-28+1-i)),]))
forep=Xfactormatrix%*%as.vector(pcoeff)
answer[(l+1),1]=forep[1]
answer[(l+1),2]=p[1]
}
xn='forep'
yn='p'
write.table(answer, file=paste(xn,yn,sep='-'), sep="\t")
}
call3(27)
please=function(Y){
t=POET(Y,6,0.8,'soft','vad')$SigmaU
print (tin)
}
call5=function(q){
answer=matrix(0,28,2)
for (l in 0:q){
j=l
i=-l
table=data.frame(
data1[(28+i):(128-j)],
data2	[(28+i):(128-j)],
data3	[(28+i):(128-j)],
data4	[(28+i):(128-j)],
data5	[(28+i):(128-j)],
data6	[(28+i):(128-j)],
data7	[(28+i):(128-j)],
data8	[(28+i):(128-j)],
data9	[(28+i):(128-j)],
data10	[(28+i):(128-j)],
data11	[(28+i):(128-j)],
data12	[(28+i):(128-j)],
data13	[(28+i):(128-j)],
data14	[(28+i):(128-j)],
data15	[(28+i):(128-j)],
data16	[(28+i):(128-j)],
data17	[(28+i):(128-j)],
data18	[(28+i):(128-j)],
data19	[(28+i):(128-j)],
data20	[(28+i):(128-j)],
data21	[(28+i):(128-j)],
data22	[(28+i):(128-j)],
data23	[(28+i):(128-j)],
data24	[(28+i):(128-j)],
data25	[(28+i):(128-j)],
data26	[(28+i):(128-j)],
data27	[(28+i):(128-j)],
data28	[(28+i):(128-j)],
data29	[(28+i):(128-j)],
data30	[(28+i):(128-j)],
data31	[(28+i):(128-j)],
data32	[(28+i):(128-j)],
data33	[(28+i):(128-j)],
data34	[(28+i):(128-j)],
data35	[(28+i):(128-j)],
data36	[(28+i):(128-j)],
data37	[(28+i):(128-j)],
data38	[(28+i):(128-j)],
data39	[(28+i):(128-j)],
data40	[(28+i):(128-j)],
data41	[(28+i):(128-j)],
data42	[(28+i):(128-j)],
data43	[(28+i):(128-j)],
data44	[(28+i):(128-j)],
data45	[(28+i):(128-j)],
data46	[(28+i):(128-j)],
data47	[(28+i):(128-j)],
data48	[(28+i):(128-j)],
data49	[(28+i):(128-j)],
data50	[(28+i):(128-j)],
data51	[(28+i):(128-j)],
data52	[(28+i):(128-j)],
data53	[(28+i):(128-j)],
data54	[(28+i):(128-j)],
data55	[(28+i):(128-j)],
data56	[(28+i):(128-j)],
data57	[(28+i):(128-j)],
data58	[(28+i):(128-j)],
data59	[(28+i):(128-j)],
data60	[(28+i):(128-j)],
data61	[(28+i):(128-j)],
data62	[(28+i):(128-j)],
data63	[(28+i):(128-j)],
data64	[(28+i):(128-j)],
data65	[(28+i):(128-j)],
data66	[(28+i):(128-j)],
data67	[(28+i):(128-j)],
data68	[(28+i):(128-j)],
data69	[(28+i):(128-j)],
data70	[(28+i):(128-j)],
data71	[(28+i):(128-j)],
data72	[(28+i):(128-j)],
data73	[(28+i):(128-j)],
data74	[(28+i):(128-j)],
data75	[(28+i):(128-j)],
data76	[(28+i):(128-j)],
data77	[(28+i):(128-j)],
data78	[(28+i):(128-j)],
data79	[(28+i):(128-j)],
data80	[(28+i):(128-j)],
data81	[(28+i):(128-j)],
data82	[(28+i):(128-j)],
data83	[(28+i):(128-j)],
data84	[(28+i):(128-j)],
data85	[(28+i):(128-j)],
data86	[(28+i):(128-j)],
data87	[(28+i):(128-j)],
data88	[(28+i):(128-j)],
data89	[(28+i):(128-j)],
data90	[(28+i):(128-j)],
data91	[(28+i):(128-j)],
data92	[(28+i):(128-j)],
data93	[(28+i):(128-j)],
data94	[(28+i):(128-j)],
data95	[(28+i):(128-j)],
data96	[(28+i):(128-j)],
data97	[(28+i):(128-j)],
data98	[(28+i):(128-j)],
data99	[(28+i):(128-j)],
data100	[(28+i):(128-j)],
data101	[(28+i):(128-j)],
data102	[(28+i):(128-j)],
data103	[(28+i):(128-j)],
data104	[(28+i):(128-j)],
data105	[(28+i):(128-j)],
data106	[(28+i):(128-j)]
)
#demean for X
Yt=matrix(0,nrow=101,ncol=106)
for (k in 1:106){
Yt[,k]=(table[,k]-mean(table[,k]))
}
Y=t(Yt)
pl=please(Y)
#covariance,eigenvector and eigenvalues
cov.Y=(Y%*%t(Y))/106
X=pl%*%cov.Y
X.eigen=eigen(X)
X.evalues=X.eigen$values
X.evector=X.eigen$vectors
X.chosenvectors=X.evector[,1:6]
X.PC=as.matrix(t(X))%*%X.chosenevectors
#101*6=t x number of factors
h=4
X.PC1=X.PC[(1+h):101,1]
X.PC2=X.PC[(1+h):101,2]
X.PC3=X.PC[(1+h):101,3]
X.PC4=X.PC[(1+h):101,4]
X.PC5=X.PC[(1+h):101,5]
X.PC6=X.PC[(1+h):101,6]
#t=28 to 127 used for extraction of factors by pca
#h=4 (meaning one earn since ours is quarterly data)
#to estimate t=28 now h=1 require t=28 to 124
p=data1[(28+i):(124-j)] #97 obs
pcoeff=coef(lm(p~X.PC1+X.PC2+X.PC3+X.PC4+X.PC5+X.PC6))
pcoeff
# results
# (Intercept)         X.PC1         X.PC2         X.PC3         X.PC4         X.PC5
#-6.522025e-03 -4.092267e-05  3.251827e-04  1.219635e-03  3.095945e-04 -1.924415e-03
#X.PC6
#1.086039e-03 5
Xfactormatrix=as.matrix(data.frame(1,X.PC[((1+h):101),]))
forep=Xfactormatrix%*%as.vector(pcoeff)
answer[(l+1),1]=forep[1]
answer[(l+1),2]=p[1]
}
xn='forep'
yn='p'
write.table(answer, file=paste(xn,yn,sep='-'), sep="\t")
}
call5(27)
fix(fun1)
print(x,2)
print(a,a)
print('a','a')
?print
a=c('a',2)
a
matplot(t(x1pred2),type='l',ylim=c(-2,2),xlab='t',ylab='x',main='forecast of 38 points')
?stsp
??stsp
savehistory("~/upto6sep2016.Rhistory")
install.packages('Kernsmooth')
install.packages('KernSmooth')
library('KernSmooth')
install.packages('devtools')
library('devtooks')
library('devtools')
x=4
class(x)
x=c(4,'a',TRUE)
class(x)
x=c(1,3,5)
y=c(3,2,10)
cbind(x,y)
data(mtcars)h<-hist(x1, breaks=10, density=10, col="lightgray", xlab="Accuracy", main="Overall")
library(datasets)
data(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
lapply(mtcars, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
?mtcars
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
library(swirl)
install_from_swirl(Statistical Inference)
install_from_swirl('Statistical Inference')
swirl()
33/36
'deck'
deck
length(deck)
1/52
2/52
4/52
5/52
5/(52*5)
1/(4*4)
info()
4/52
5/52
0
1/52
12/52
2/51
?ppois
ppois(10,15)
ppois(10,5*3)
dpois(10,5*3)
dpois(10,5*3)
ppois(10,5*3)
qnorm(0.95,mean=1100,sq=75)
qnorm(0.95,mean=1100,sd=75)
qnorm(0.95,mean=1100,sd=75/10)
pbinom(3,size=5,prob=0.5,lower.tail=TRUE)
install.packages("rmarkdown", repos = "https://cran.revolutionanalytics.com")
The mean and median total number of steps taken per day are `rdmean` and `rdmedian` respectively. The differences between the estimates from the first part of the assignment and the estimates from the second part of data are `rdmean` and `rdmedian` respectively. The impact
rymean=mean(ytotalsteps$steps)
rymedian=median(ytotalsteps$steps)
#downloading of file
if(!file.exists("getdata-projectfiles-UCI HAR Dataset.zip")) {
temp <- tempfile()
download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
unzip(temp)
unlink(temp)
}
x=read.csv('activity.csv',stringsAsFactors = FALSE, header=TRUE)
x$date=as.Date(x$date, format="%Y-%m-%d")
#reading data
x.na=x[!is.na(x),]
totalsteps=aggregate(steps~date, data = x.na, sum)
hist(totalsteps$steps,main='Histogram of total number of steps each day',
xlab='Number of steps',col='red')
rmean=mean(totalsteps$steps)
rmedian=median(totalsteps$steps)
averagesteps=aggregate(steps~interval, data =x.na, mean)
plot(averagesteps$interval,averagesteps$steps,type='l',main='Average number of steps taken by interval',
ylab='Number of steps taken',xlab='Interval',col='red')
averagesteps[which.max(averagesteps$steps),'interval']
nrow(x[is.na(x),])
y=x
for (i in 1:nrow(y)){
if (is.na(y[i,'steps'])==TRUE){
y[i,'steps']=averagesteps[y[i,'interval']==averagesteps$interval,'steps']
}
}
ytotalsteps=aggregate(steps~date, data = y, sum)
hist(ytotalsteps$steps,main='Histogram of total number of steps each day',
xlab='Number of steps',col='blue')
rymean=mean(ytotalsteps$steps)
rymedian=median(ytotalsteps$steps)
rymean-rmean
rymedian-rymedian
A panel plot containing the time seris plot constructed for weekdays and weekend is plotted. From the panel plot, it can be infered that the participant is more active during weekend with more higher activity levels occuring throughout.
A new factor variable is created with two levels -- "weekday" and "weekend" indicating whether a given date is a weekday or weekend.
A new factor variable is created with two levels -- "weekday" and "weekend" indicating whether a given date is a weekday or weekend.
knit2html('PA1_template')
library(knitr)
knit2html('PA1_template')
knit2html('PA1_template.rmd')
getwd()
setwd("C:/Users/ashlyn/Desktop/Coursera/Data Science JHU/Reproducible Research/Project 1/RepData_Assessment1")
setwd("C:/Users/ashlyn/Desktop/Coursera/Data Science JHU/Reproducible Research/Project 1/RepData_PeerAssessment1")
setwd("C:/Users/ashlyn/Desktop/Coursera/Data Science JHU/Reproducible Research/Project1/RepData_PeerAssessment1")
knit2html('PA1_template.rmd')
